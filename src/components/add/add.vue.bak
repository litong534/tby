<template>
  <div>
    <div class="header">
      <i @click="goBack" class="fa fa-arrow-left"></i>
      <div>添加档案</div>
    </div>
    <div class="profile" ref="profile">
      <cube-scroll>
        <div class="container">
          <div class="title">姓名</div>
          <input type="text" v-model="name" />
        </div>
        <div class="container">
          <div class="title">性别</div>
          <cube-checkbox-group style="margin-bottom: 10px;" v-model="sex" :horizontal="true">
            <cube-checkbox label="0">女</cube-checkbox>
            <cube-checkbox label="1">男</cube-checkbox>
          </cube-checkbox-group>
        </div>
        <div class="container">
          <div class="title">职业</div>
          <input type="text" v-model="job" />
        </div>
        <div class="container">
          <div class="title">学校</div>
          <input type="text" v-model="school" />
        </div>
        <div class="container">
          <div class="title">公司</div>
          <input type="text" v-model="company" />
        </div>
        <div class="container">
          <div class="title">感情状况</div>
          <cube-checkbox-group style="margin-bottom: 10px;" v-model="emotion" :horizontal="true">
            <cube-checkbox label="0">已婚</cube-checkbox>
            <cube-checkbox label="1">单身</cube-checkbox>
            <cube-checkbox label="2">交往中</cube-checkbox>
          </cube-checkbox-group>
        </div>
        <div class="container">
          <div class="title">病史</div>
          <input type="text" v-model="ill" />
        </div>
        <div class="container">
          <div class="title">兴趣爱好</div>
          <input type="text" v-model="hobby" />
        </div>
        <div class="container">
          <div class="title">禁忌</div>
          <input type="text" v-model="warning" />
        </div>
        <div class="container">
          <div class="title">备注</div>
          <textarea class="area" v-model="note" />
        </div>
      </cube-scroll>
    </div>
    <div class="btn-group">
      <cube-button style="margin-right: 15px;" @click="goBack">取消</cube-button>
      <cube-button :primary="true" @click="commit">确定</cube-button>
    </div>
  </div>
</template>

<script>
import { addDoc } from "@/api/document/document.js";
import { prefixStyle } from "@/common/js/index.js";
const transform = prefixStyle('transform');
export default {
  data() {
    return {
      sex: [],
      emotion: [],
      name: "",
      job: "",
      school: "",
      company: "",
      ill: "",
      hobby: "",
      warning: "",
      note: "",
      height: 0
    };
  },
  methods: {
    goBack() {
      this.$router.replace("/home");
    },
    commit() {
      this.$createToast({
        time: 0,
        txt: "请稍等...",
        mask: true
      }).show();
      addDoc({
        sex: parseInt(this.sex[0]),
        emotion: parseInt(this.emotion[0]),
        name: this.name,
        job: this.job,
        school: this.school,
        company: this.company,
        ill: this.ill,
        hobby: this.hobby,
        warning: this.warning,
        note: this.note
      }).then(res => {
        if (res.data.code === 0) {
          this.$createToast({
            txt: "成功",
            mask: true,
            type: "correct",
            time: 1000
          }).show();
          this._reset();
        }
      });
    },
    _reset() {
      this.sex = [];
      this.emotion = [];
      this.name = "";
      this.job = "";
      this.school = "";
      this.company = "";
      this.ill = "";
      this.hobby = "";
      this.warning = "";
      this.note = "";
    }
  },
  watch: {
    sex(newVal) {
      if (newVal.length > 1) {
        this.sex = newVal.slice(1);
      }
    },
    emotion(newVal) {
      if (newVal.length > 1) {
        this.emotion = newVal.slice(1);
      }
    },
    height(newVal, oldVal) {
      if(oldVal === 0) {
        return;
      }

      if(newVal < oldVal) {
        // show keyboard
        
      }
    }
  },
  mounted() {
      const profile = this.$refs.profile;
    this.height = profile.offsetHeight;
    const me = this;
    window.addEventListener('resize',() => {
      me.height = profile.offsetHeight;
    });
  }
};
</script>

<style lang="stylus" scoped>
@import '~common/css/index';
.header
  height: 50px;
  display: flex;
  flex-flow: row nowrap;
  justify-content: center;
  align-items: center;
  background: $default_blue;
  color: #fff;
  i
    position: absolute;
    top: 15px;
    left: 15px;
    font-size: 25px;
.profile
  position: fixed;
  top: 70px;
  bottom: 70px;
  left: 15px;
  right: 15px;
  overflow: hidden;
  .cube-scroll-wrapper
    background-color: $dark;
  .container
    width: 100%;
    padding: 5px 0;
    .title
      margin: 5px 0;
    input
      normal-input();
    .area
      width: 100%;
      height: 100px;
      font-size: 20px;
      padding: 0 15px;
      box-sizing: border-box;
      border: 1px solid #ddd;
.btn-group
  position: fixed;
  height: 60px;
  bottom: 0;
  width: 100%;
  padding: 0 15px 5px 15px;
  box-sizing: border-box;
  margin: 0 auto;
  display: flex;
  justify-content: space-between;
  align-items: center;
</style>
